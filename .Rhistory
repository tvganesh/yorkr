library(yorkr)
library(dplyr)
#allBatsmenIPL <-readRDS("./embeddings_data/all-batsmenT20M.rds")
#allBowlersIPL <-readRDS("./embeddings_data/all-bowlersT20M.rds")
#load("./embeddings_data/T20M-MatchesDataFrame.RData")
t20DF=NULL
load("./embed/IPL-MatchesDataFrame.RData")
t20DF=rbind(t20DF,t20MDF)
load("./embed/T20M-MatchesDataFrame.RData")
t20DF=rbind(t20DF,t20MDF)
load("./embed/T20W-MatchesDataFrame.RData")
t20DF=rbind(t20DF,t20MDF)
load("./embed/BBL-MatchesDataFrame.RData")
t20DF=rbind(t20DF,t20MDF)
load("./embed/CPL-MatchesDataFrame.RData")
t20DF=rbind(t20DF,t20MDF)
load("./embed/PSL-MatchesDataFrame.RData")
t20DF=rbind(t20DF,t20MDF)
load("./embed/NTB-MatchesDataFrame.RData")
t20DF=rbind(t20DF,t20MDF)
load("./embed/SSM-MatchesDataFrame.RData")
t20DF=rbind(t20DF,t20MDF)
load("./embed/WBB-MatchesDataFrame.RData")
t20DF=rbind(t20DF,t20MDF)
batsman = bowler = runs = fours = totalRuns = ballsFaced = wicketPlayerOut = NULL
sixes = fours = timesOut = NULL
allBatsmen = unique(t20DF$batsman)
allBowlers = unique(t20DF$bowler)
a <- filter(t20MDF,batsman %in% allBatsmen & bowler %in% allBowlers)
View(a)
b <- select(a, batsman, bowler, runs)
c <- b %>% group_by(batsman,bowler) %>% summarize(ballsFaced = n(), totalRuns = sum(runs))
d <- b %>% group_by(batsman,bowler)  %>%
mutate(fours=(runs>=4 & runs <6)) %>%
filter(fours==TRUE) %>% summarise(fours=n())
d1 <- left_join(c,d,by=c(batsman,bowler))
e <- b %>% group_by(batsman,bowler)  %>%
mutate(sixes=(runs ==6)) %>%
filter(sixes == TRUE) %>% summarise(sixes=n())
e1 = left_join(d1,e,by=c(batsman,bowler))
f1 = e1[e1$totalRuns != 0,]
g = select(f1,batsman,bowler,totalRuns,ballsFaced,fours,sixes)
names(g) <- c('batsman1','bowler1','totalRuns','ballsFaced','fours','sixes')
h <- select(g,batsman1,bowler1,totalRuns)
i <- select(g,batsman1,bowler1,ballsFaced,fours,sixes)
i[is.na(i)] <- 0
View(i)
write.csv(h,"output/batsmanVsBowlerT20ME.csv",row.names=FALSE)
write.csv(i,"batsmanVsBowlerT20All.csv",row.names=FALSE)
View(a)
View(a)
batsman %in% allBatsmen
t20DF$batsman
t20DF$batsman %in$
t20DF$batsman %in$ allBatsmen
t20DF$batsman
t20DF$batsman %in% allBatsmen
c <- t20DF %>% group_by(batsman,bowler) %>% summarize(ballsFaced = n(), totalRuns = sum(runs))
d <- t20DF %>% group_by(batsman,bowler)  %>%
mutate(fours=(runs>=4 & runs <6)) %>%
filter(fours==TRUE) %>% summarise(fours=n())
d1 <- left_join(c,d,by=c(batsman,bowler))
View(d1)
View(d1)
e <- t20DF %>% group_by(batsman,bowler)  %>%
mutate(sixes=(runs ==6)) %>%
filter(sixes == TRUE) %>% summarise(sixes=n())
e1 = left_join(d1,e,by=c(batsman,bowler))
f1 = e1[e1$totalRuns != 0,]
g = select(f1,batsman,bowler,totalRuns,ballsFaced,fours,sixes)
View(g)
names(g) <- c('batsman1','bowler1','totalRuns','ballsFaced','fours','sixes')
h <- select(g,batsman1,bowler1,totalRuns)
i <- select(g,batsman1,bowler1,ballsFaced,fours,sixes)
i[is.na(i)] <- 0
write.csv(h,"batsmanVsBowlerT20ME.csv",row.names=FALSE)
write.csv(i,"batsmanVsBowlerT20All.csv",row.names=FALSE)
View(h)
View(i)
write.csv(h,"batsmanVsBowlerE.csv",row.names=FALSE)
write.csv(i,"batsmanVsBowlerAll.csv",row.names=FALSE)
getwd(0)
getwd()
write.csv(h,"batsmanVsBowlerE.csv",row.names=FALSE)
write.csv(i,"batsmanVsBowlerAll.csv",row.names=FALSE)
View(h)
View(i)
df6=read.csv("embed.csv",row.names = FALSE)
df6=read.csv("embed.csv")
View(df6)
View(df6)
df7=select(df6,batsman,bowler,'normalizedBallsFaced','normalizedFours','normalizedSixes')
View(df7)
df7=select(df6,batsman,bowler,'normalizedBallsFaced','normalizedFours','normalizedSixes','totalRuns')
trainTestSplit <- function(df,trainPercent,seed1){
## Sample size percent
samp_size <- floor(trainPercent/100 * nrow(df))
## set the seed
set.seed(seed1)
idx <- sample(seq_len(nrow(df)), size = samp_size)
idx
}
train_idx <- trainTestSplit(df,trainPercent=80,seed=5)
train_idx <- trainTestSplit(df7,trainPercent=80,seed=5)
train <- df7[train_idx, ]
fit=lm(totalRuns~.,data=train)
summary(fit)
test <- df7[-train_idx, ]
test <- df7[-train_idx, ]
fit=lm(totalRuns~.,data=train)
summary(fit)
rsquared=Rsquared(fit,test,test$totalRuns)
Rsquared <- function(lmfit,newdf,y){
yhat <- predict(lmfit,newdata=newdf)
RSS <- sum((y - yhat)^2)
TSS <- sum((y - mean(y))^2)
rsquared <-1 - (RSS/TSS)
rsquared
}
rsquared=Rsquared(fit,test,test$totalRuns)
sprintf("R-squared for multi-variate regression (crimes.csv)  is : %f", rsquared)
setwd("~/backup/software/cricket-package/yorkrPackage/yorkr25Dec2022/yorkr")
setwd("..")
system("R CMD build yorkr")
install.packages("devtools")
library(devtools)
library(usethis)
system("R CMD build yorkr")
getwd()
setwd("..")
system("R CMD build yorkr")
install.packages("~/backup-macbook/software/cricket-package/yorkrPackage/yorkr04Jan2023/yorkr_0.0.36.tar.gz", repos = NULL, type = "source")
library(yorkr)
shiny::runApp('~/backup-macbook/software/cricket-package/yorkr-cricsheet/gpp2022-6')
library(glmnet)
library(ranger)
runApp('~/backup-macbook/software/cricket-package/yorkr-cricsheet/gpp2022-6')
load("iplMatches//Chennai Super Kings-Deccan Chargers-2009-04-27.RData")
setwd("/Volumes/tvganesh/backup-mini/software/cricket-package/yorkr-cricsheet/winprobability")
load("iplMatches//Chennai Super Kings-Deccan Chargers-2009-04-27.RData")
team1Size=0
requiredRuns=0
# Read batsman, bowler vectors
batsmanMap=readRDS("batsmanMap.rds")
bowlerMap=readRDS("bowlerMap.rds")
teamA=match$team[grep("1st.0.1",match$ball)]
# Filter the performance of team1
a <-filter(match,team==teamA)
#Balls in team 1's innings
ballsIn1stInnings= dim(a)[1]
library(dplyr)
team1Size=0
requiredRuns=0
# Read batsman, bowler vectors
batsmanMap=readRDS("batsmanMap.rds")
bowlerMap=readRDS("bowlerMap.rds")
teamA=match$team[grep("1st.0.1",match$ball)]
# Filter the performance of team1
a <-filter(match,team==teamA)
#Balls in team 1's innings
ballsIn1stInnings= dim(a)[1]
shiny::runApp('/Volumes/tvganesh/backup-mini/software/cricket-package/yorkr-cricsheet/gpp2022-6')
roxygen2::roxygenize()
devtools::load_all("~/backup-macbook/software/cricket-package/yorkrPackage/yorkr04Jan2023/yorkr")
library(yorkr)
shiny::runApp('~/backup-mini/software/cricket-package/yorkr-cricsheet/gpp2023-2')
runApp('~/backup-mini/software/cricket-package/yorkr-cricsheet/gpp2023-2')
runApp('~/backup-mini/software/cricket-package/yorkr-cricsheet/gpp2023-1')
runApp('~/backup-mini/software/cricket-package/yorkr-cricsheet/gpp2023-1')
version
shiny::runApp('~/backup-mini/software/cricket-package/yorkr-cricsheet/gpp2023-1')
library(yorkr)
shiny::runApp('~/backup-mini/software/cricket-package/yorkr-cricsheet/gpp2023-1')
runApp('~/backup-mini/software/cricket-package/yorkr-cricsheet/gpp2023-2')
runApp('~/backup-mini/software/cricket-package/yorkr-cricsheet/gpp2023-2')
install.packages("yorkr")
install.packages("yorkr")
shiny::runApp('~/backup-mini/software/cricket-package/yorkr-cricsheet/gpp2023-2')
BiocManager::install("rhdf5")
library(rhdf5)
#new_model <- load_model_hdf5('wpa.h5')
dl_model <- load_model_hdf5('wpDL.h5')
runApp('~/backup-mini/software/cricket-package/yorkr-cricsheet/gpp2023-2')
runApp('~/backup-mini/software/cricket-package/yorkr-cricsheet/gpp2023-2')
install.packages("tensorflow")
install.packages("tensorflow")
install.packages("tensorflow")
install.packages("reticulate")
library(dplyr)
library(caret)
library(reticulate)
#path_to_python <- install_python()
virtualenv_create("r-reticulate", python = "/Users/tvganesh/Library/r-miniconda/envs/r-reticulate/bin/python")
#virtualenv_create("r-reticulate", python = "/Users/tvganesh/opt/anaconda3/bin/python")
library(tensorflow)
install_tensorflow(envname = "r-reticulate")
install.packages("keras")
library(keras)
install_keras(envname = "r-reticulate")
tf$constant("Hello Tensorflow!")
#new_model <- load_model_hdf5('wpa.h5')
dl_model <- load_model_hdf5('wpDL.h5')
weights <- get_weights(dl_model)
shiny::runApp('~/backup-mini/software/cricket-package/yorkr-cricsheet/gpp2023-2')
install.packages("yorkr")
library(yorkr)
runApp('~/backup-mini/software/cricket-package/yorkr-cricsheet/gpp2023-2')
load("iplMatches/Chennai Super Kings-Lucknow Super Giants-2022-03-31.RData")
setwd("~/backup-mini/software/cricket-package/yorkrPackage/yorkr10Mar2023/yorkr/R")
load("iplMatches/Chennai Super Kings-Lucknow Super Giants-2022-03-31.RData")
setwd("~/backup-mini/software/cricket-package/yorkr-cricsheet/gpp2023-2")
load("iplMatches/Chennai Super Kings-Lucknow Super Giants-2022-03-31.RData")
setwd("~/backup-mini/software/cricket-package/yorkr-cricsheet/gpp2023-2/ipl")
load("iplMatches/Chennai Super Kings-Lucknow Super Giants-2022-03-31.RData")
#load("iplMatches//Chennai Super Kings-Kings XI Punjab-2009-05-20.RData")
#library(dplyr)
#library(yorkr)
#library(ggplot2)
#library(keras)
#library(rhdf5)
#dl_model <- load_model_hdf5('wpDL.h5')
#match=overs
team1Size=0
requiredRuns=0
# Read batsman, bowler vectors
batsmanMap=readRDS("batsmanMap.rds")
bowlerMap=readRDS("bowlerMap.rds")
teamA=match$team[grep("1st.0.1",match$ball)]
runApp('~/backup-mini/software/cricket-package/yorkr-cricsheet/gpp2023-2')
runApp('~/backup-mini/software/cricket-package/yorkr-cricsheet/gpp2023-2')
shiny::runApp('~/backup-mini/software/cricket-package/yorkr-cricsheet/gpp2023-2')
install.packages("tensorflow")
install.packages("reticulate")
install.packages("tensorflow")
library(dplyr)
library(caret)
library(reticulate)
#path_to_python <- install_python()
virtualenv_create("r-reticulate", python = "/Users/tvganesh/Library/r-miniconda/envs/r-reticulate/bin/python")
#virtualenv_create("r-reticulate", python = "/Users/tvganesh/opt/anaconda3/bin/python")
library(tensorflow)
install_tensorflow(envname = "r-reticulate")
install.packages("keras")
library(keras)
install_keras(envname = "r-reticulate")
tf$constant("Hello Tensorflow!")
BiocManager::install(version = "3.16")
BiocManager::install("rhdf5")
library(rhdf5)
h5ls("t20.h5")
BiocManager::install("rhdf5")
library(rhdf5)
h5ls("t20.h5")
#new_model <- load_model_hdf5('wpa.h5')
dl_model <- load_model_hdf5('wpDL.h5')
weights <- get_weights(dl_model)
#new_model <- load_model_hdf5('wpa.h5')
dl_model <- load_model_hdf5('wpDL.h5')
BiocManager::install(version = "3.16")
BiocManager::install("rhdf5")
library(rhdf5)
setwd("~/backup-mini/software/cricket-package/yorkr-cricsheet/winprobability")
#new_model <- load_model_hdf5('wpa.h5')
dl_model <- load_model_hdf5('wpDL.h5')
install.packages("keras")
install.packages("keras")
#virtualenv_create("r-reticulate", python = "/Users/tvganesh/opt/anaconda3/bin/python")
library(tensorflow)
#new_model <- load_model_hdf5('wpa.h5')
dl_model <- load_model_hdf5('wpDL.h5')
library(rhdf5)
#new_model <- load_model_hdf5('wpa.h5')
dl_model <- load_model_hdf5('wpDL.h5')
setwd("..")
setwd("..")
system("R CMD build yorkr")
getwd()
setwd("yorkr10Mar2023/")
system("R CMD build yorkr")
install.packages("yorkr_0.0.39.tar.gz",repos = NULL, type="source")
shiny::runApp('~/backup-mini/software/cricket-package/yorkr-cricsheet/gpp2023-2')
system("R CMD build yorkr")
system("R CMD build yorkr")
setwd("~/backup-mini/software/cricket-package/yorkrPackage/yorkr10Mar2023/yorkr")
setwd("..")
system("R CMD build yorkr")
install.packages("yorkr_0.0.36.tar.gz",repos = NULL, type="source")
install.packages("yorkr_0.0.39.tar.gz",repos = NULL, type="source")
shiny::runApp('~/backup-mini/software/cricket-package/yorkr-cricsheet/gpp2023-2')
runApp('~/backup-mini/software/cricket-package/yorkr-cricsheet/gpp2023-1')
runApp('~/backup-mini/software/cricket-package/yorkr-cricsheet/gpp2023-1')
runApp('~/backup-mini/software/cricket-package/yorkr-cricsheet/gpp2023-1')
runApp('~/backup-mini/software/cricket-package/yorkr-cricsheet/gpp2023-1')
View(final_lr_model)
system("R CMD build yorkr")
getwd()
setwd("..")
system("R CMD build yorkr")
install.packages("yorkr_0.0.39.tar.gz",repos = NULL, type="source")
shiny::runApp('~/backup-mini/software/cricket-package/yorkr-cricsheet/gpp2023-1')
getwd()
setwd("..")
system("R CMD build yorkr")
install.packages("yorkr_0.0.39.tar.gz",repos = NULL, type="source")
roxygen2::roxygenize()
load("iplMatches/Chennai Super Kings-Lucknow Super Giants-2022-03-31.RData")
setwd("~/backup-mini/software/cricket-package/yorkr-cricsheet/winprobability")
load("iplMatches/Chennai Super Kings-Lucknow Super Giants-2022-03-31.RData")
#load("iplMatches//Chennai Super Kings-Kings XI Punjab-2009-05-20.RData")
library(dplyr)
library(yorkr)
library(ggplot2)
library(keras)
library(rhdf5)
dl_model <- load_model_hdf5('wpDL.h5')
match=overs
team1Size=0
requiredRuns=0
# Read batsman, bowler vectors
batsmanMap=readRDS("batsmanMap.rds")
bowlerMap=readRDS("bowlerMap.rds")
teamA=match$team[grep("1st.0.1",match$ball)]
# Filter the performance of team1
a <-filter(match,team==teamA)
#Balls in team 1's innings
ballsIn1stInnings= dim(a)[1]
b <- select(a,batsman, bowler,ball,totalRuns,wicketPlayerOut,team1,team2,date)
c <-mutate(b,ball=gsub("1st\\.","",ball))
# Compute the total runs scored by team
d <- mutate(c,runs=cumsum(totalRuns))
if(match$winner[1]== teamA){
d$isWinner=1
} else{
d$isWinner=0
}
#Get the ball num
d$ballNum = seq.int(nrow(d))
# Compute the balls remaining for the team
d$ballsRemaining = ballsIn1stInnings - d$ballNum +1
# Wickets lost by team
d$wicketNum = d$wicketPlayerOut != "nobody"
d=d %>% mutate(numWickets=cumsum(d$wicketNum==TRUE))
#Performance index is based on run rate (runs scored/ ball number) with wickets in hand
d$perfIndex = (d$runs/d$ballNum) * (11 - d$numWickets)
# Compute run rate
d$runRate = (d$runs/d$ballNum)
d$runsMomentum = (11 - d$numWickets)/d$ballsRemaining
df8 = select(d, batsman,bowler,ballNum, ballsRemaining, runs, runRate,numWickets,runsMomentum,perfIndex, isWinner)
df9=left_join(df8,batsmanMap)
df9=left_join(df9,bowlerMap)
dfa = select(df9, batsmanIdx,bowlerIdx,ballNum,ballsRemaining,runs,runRate,numWickets,
runsMomentum,perfIndex, isWinner)
print(dim(dfa))
# Required runs is the team made by team 1 + 1
requiredRuns=d[dim(d)[1],]$runs +1
teamB=match$team[grep("2nd.0.1",match$ball)]
# Filter the performance of team1
a1 <-filter(match,team==teamB)
#Balls in team 1's innings
ballsIn2ndInnings= dim(a1)[1] + 1
b1 <- select(a1,batsman,bowler,ball,totalRuns,wicketPlayerOut,team1,team2,date)
c1 <-mutate(b1,ball=gsub("2nd\\.","",ball))
# Compute total Runs
d1 <- mutate(c1,runs=cumsum(totalRuns))
# Check of team2 is winner
if(match$winner[1]== teamB){
d1$isWinner=1
} else{
d1$isWinner=0
}
# Compute ball number
d1$ballNum= ballsIn1stInnings + seq.int(nrow(d1))
# Compute remaining balls in 2nd innings
d1$ballsRemaining=  ballsIn2ndInnings -  seq.int(nrow(d1))
# Compute wickets remaining
d1$wicketNum = d1$wicketPlayerOut != "nobody"
d1=d1 %>% mutate(numWickets=cumsum(d1$wicketNum==TRUE))
ballNum=d1$ballNum - ballsIn1stInnings
#Performance index is based on run rate (runs scored/ ball number) with wickets in hand
d1$perfIndex = (d1$runs/ballNum) * (11 - d1$numWickets)
#Compute required runs
d1$requiredRuns = requiredRuns - d1$runs
d1$runRate = (d1$requiredRuns/d1$ballsRemaining)
d1$runsMomentum = (11 - d1$numWickets)/d1$ballsRemaining
# Rename required runs as runs
df10 = select(d1,batsman,bowler,ballNum,ballsRemaining, requiredRuns,runRate,numWickets,runsMomentum,perfIndex, isWinner)
names(df10) =c("batsman","bowler","ballNum","ballsRemaining","runs","runRate","numWickets","runsMomentum","perfIndex","isWinner")
print(dim(df10))
df11=left_join(df10,batsmanMap)
df11=left_join(df11,bowlerMap)
df2=rbind(df9,df11)
dfb = select(df11, batsmanIdx,bowlerIdx,ballNum,ballsRemaining,runs,runRate,numWickets,
runsMomentum,perfIndex, isWinner)
print(dim(dfb))
# load the model
m=predict(dl_model,dfa,type = "prob")
m1=m*100
m2=matrix(m1)
n=predict(dl_model,dfb,type="prob")
n1=n*100
n2=matrix(n1)
m3= 100-n2
n3=100-m2
team1=rbind(m2,m3)
team2=rbind(n3,n2)
team11=as.data.frame(cbind(df2$ballNum,team1))
names(team11) = c("ballNum","winProbability")
team22=as.data.frame(cbind(df2$ballNum,team2))
names(team22) = c("ballNum","winProbability")
aa = cbind(df8,m2)
aa2 = aa %>% select(bowler,m2)
aa = cbind(df8,m2)
# Filter the performance of team1
a <-filter(match,team==teamA)
#Balls in team 1's innings
ballsIn1stInnings= dim(a)[1]
b <- select(a,batsman, bowler,ball,totalRuns,wicketPlayerOut,team1,team2,date)
c <-mutate(b,ball=gsub("1st\\.","",ball))
# Compute the total runs scored by team
d <- mutate(c,runs=cumsum(totalRuns))
if(match$winner[1]== teamA){
d$isWinner=1
} else{
d$isWinner=0
}
#Get the ball num
d$ballNum = seq.int(nrow(d))
# Compute the balls remaining for the team
d$ballsRemaining = ballsIn1stInnings - d$ballNum +1
# Wickets lost by team
d$wicketNum = d$wicketPlayerOut != "nobody"
d=d %>% mutate(numWickets=cumsum(d$wicketNum==TRUE))
#Performance index is based on run rate (runs scored/ ball number) with wickets in hand
d$perfIndex = (d$runs/d$ballNum) * (11 - d$numWickets)
# Compute run rate
d$runRate = (d$runs/d$ballNum)
d$runsMomentum = (11 - d$numWickets)/d$ballsRemaining
df8 = select(d, batsman,bowler,ballNum, ballsRemaining, runs, runRate,numWickets,runsMomentum,perfIndex, isWinner)
df9=left_join(df8,batsmanMap)
df9=left_join(df9,bowlerMap)
dfa = select(df9, batsmanIdx,bowlerIdx,ballNum,ballsRemaining,runs,runRate,numWickets,
runsMomentum,perfIndex, isWinner)
print(dim(dfa))
# Required runs is the team made by team 1 + 1
requiredRuns=d[dim(d)[1],]$runs +1
teamB=match$team[grep("2nd.0.1",match$ball)]
# Filter the performance of team1
a1 <-filter(match,team==teamB)
#Balls in team 1's innings
ballsIn2ndInnings= dim(a1)[1] + 1
b1 <- select(a1,batsman,bowler,ball,totalRuns,wicketPlayerOut,team1,team2,date)
c1 <-mutate(b1,ball=gsub("2nd\\.","",ball))
# Compute total Runs
d1 <- mutate(c1,runs=cumsum(totalRuns))
# Check of team2 is winner
if(match$winner[1]== teamB){
d1$isWinner=1
} else{
d1$isWinner=0
}
# Compute ball number
d1$ballNum= ballsIn1stInnings + seq.int(nrow(d1))
# Compute remaining balls in 2nd innings
d1$ballsRemaining=  ballsIn2ndInnings -  seq.int(nrow(d1))
# Compute wickets remaining
d1$wicketNum = d1$wicketPlayerOut != "nobody"
d1=d1 %>% mutate(numWickets=cumsum(d1$wicketNum==TRUE))
ballNum=d1$ballNum - ballsIn1stInnings
#Performance index is based on run rate (runs scored/ ball number) with wickets in hand
d1$perfIndex = (d1$runs/ballNum) * (11 - d1$numWickets)
#Compute required runs
d1$requiredRuns = requiredRuns - d1$runs
d1$runRate = (d1$requiredRuns/d1$ballsRemaining)
d1$runsMomentum = (11 - d1$numWickets)/d1$ballsRemaining
# Rename required runs as runs
df10 = select(d1,batsman,bowler,ballNum,ballsRemaining, requiredRuns,runRate,numWickets,runsMomentum,perfIndex, isWinner)
names(df10) =c("batsman","bowler","ballNum","ballsRemaining","runs","runRate","numWickets","runsMomentum","perfIndex","isWinner")
print(dim(df10))
df11=left_join(df10,batsmanMap)
df11=left_join(df11,bowlerMap)
df2=rbind(df9,df11)
dfb = select(df11, batsmanIdx,bowlerIdx,ballNum,ballsRemaining,runs,runRate,numWickets,
runsMomentum,perfIndex, isWinner)
print(dim(dfb))
# load the model
m=predict(dl_model,dfa,type = "prob")
dl_model <- load_model_hdf5('wpDL.h5')
match=overs
load("iplMatches/Chennai Super Kings-Lucknow Super Giants-2022-03-31.RData")
#load("iplMatches//Chennai Super Kings-Kings XI Punjab-2009-05-20.RData")
library(dplyr)
library(yorkr)
library(ggplot2)
library(keras)
library(rhdf5)
dl_model <- load_model_hdf5('wpDL.h5')
load("iplMatches/Chennai Super Kings-Lucknow Super Giants-2022-03-31.RData")
#load("iplMatches//Chennai Super Kings-Kings XI Punjab-2009-05-20.RData")
library(dplyr)
library(yorkr)
library(ggplot2)
library(keras)
library(rhdf5)
dl_model <- load_model_hdf5('wpDL.h5')
setwd("~/backup-mini/software/cricket-package/yorkr-cricsheet/winprobability")
getwd()
setwd("..")
roxygen2::roxygenize()
getwd()
setwd("yorkr")
roxygen2::roxygenize()
roxygen2::roxygenize()
